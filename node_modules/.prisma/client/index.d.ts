
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = {
  username: string
  password: string
}

/**
 * Model User
 * 
 */
export type User = {
  username: string
  full_name: string
  password: string
  email: string
  phone: string
  jkel: string | null
  tgl_lahir: string | null
  alamat: string | null
  ktp: string | null
  kode_pos: string | null
  token: string | null
}

/**
 * Model Kota
 * 
 */
export type Kota = {
  nm_kota: string
  about: string
  country: string
}

/**
 * Model Destination
 * 
 */
export type Destination = {
  id: number
  nm_destination: string
  about: string
  nm_kota: string
}

/**
 * Model Hotel
 * 
 */
export type Hotel = {
  id: number
  nm_hotel: string
  about: string
  alamat: string
  price: string
  id_destination: number
}

/**
 * Model Booking
 * 
 */
export type Booking = {
  id_booking: number
  check_in: Date
  check_out: Date
  price: string
  username: string
  id_hotel: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.kota`: Exposes CRUD operations for the **Kota** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kotas
    * const kotas = await prisma.kota.findMany()
    * ```
    */
  get kota(): Prisma.KotaDelegate<GlobalReject>;

  /**
   * `prisma.destination`: Exposes CRUD operations for the **Destination** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Destinations
    * const destinations = await prisma.destination.findMany()
    * ```
    */
  get destination(): Prisma.DestinationDelegate<GlobalReject>;

  /**
   * `prisma.hotel`: Exposes CRUD operations for the **Hotel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hotels
    * const hotels = await prisma.hotel.findMany()
    * ```
    */
  get hotel(): Prisma.HotelDelegate<GlobalReject>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    User: 'User',
    Kota: 'Kota',
    Destination: 'Destination',
    Hotel: 'Hotel',
    Booking: 'Booking'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    booking: number
  }

  export type UserCountOutputTypeSelect = {
    booking?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type KotaCountOutputType
   */


  export type KotaCountOutputType = {
    destination: number
  }

  export type KotaCountOutputTypeSelect = {
    destination?: boolean
  }

  export type KotaCountOutputTypeGetPayload<S extends boolean | null | undefined | KotaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? KotaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (KotaCountOutputTypeArgs)
    ? KotaCountOutputType 
    : S extends { select: any } & (KotaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof KotaCountOutputType ? KotaCountOutputType[P] : never
  } 
      : KotaCountOutputType




  // Custom InputTypes

  /**
   * KotaCountOutputType without action
   */
  export type KotaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the KotaCountOutputType
     */
    select?: KotaCountOutputTypeSelect | null
  }



  /**
   * Count Type DestinationCountOutputType
   */


  export type DestinationCountOutputType = {
    hotel: number
  }

  export type DestinationCountOutputTypeSelect = {
    hotel?: boolean
  }

  export type DestinationCountOutputTypeGetPayload<S extends boolean | null | undefined | DestinationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DestinationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DestinationCountOutputTypeArgs)
    ? DestinationCountOutputType 
    : S extends { select: any } & (DestinationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DestinationCountOutputType ? DestinationCountOutputType[P] : never
  } 
      : DestinationCountOutputType




  // Custom InputTypes

  /**
   * DestinationCountOutputType without action
   */
  export type DestinationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DestinationCountOutputType
     */
    select?: DestinationCountOutputTypeSelect | null
  }



  /**
   * Count Type HotelCountOutputType
   */


  export type HotelCountOutputType = {
    booking: number
  }

  export type HotelCountOutputTypeSelect = {
    booking?: boolean
  }

  export type HotelCountOutputTypeGetPayload<S extends boolean | null | undefined | HotelCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HotelCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (HotelCountOutputTypeArgs)
    ? HotelCountOutputType 
    : S extends { select: any } & (HotelCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof HotelCountOutputType ? HotelCountOutputType[P] : never
  } 
      : HotelCountOutputType




  // Custom InputTypes

  /**
   * HotelCountOutputType without action
   */
  export type HotelCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HotelCountOutputType
     */
    select?: HotelCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    username: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    username: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    username: number
    password: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    username?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    username?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    username?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: AdminWhereInput
    orderBy?: Enumerable<AdminOrderByWithAggregationInput>
    by: AdminScalarFieldEnum[]
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    username: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect = {
    username?: boolean
    password?: boolean
  }


  export type AdminGetPayload<S extends boolean | null | undefined | AdminArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Admin :
    S extends undefined ? never :
    S extends { include: any } & (AdminArgs | AdminFindManyArgs)
    ? Admin 
    : S extends { select: any } & (AdminArgs | AdminFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Admin ? Admin[P] : never
  } 
      : Admin


  type AdminCountArgs = 
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find the first Admin that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const adminWithUsernameOnly = await prisma.admin.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs>(
      args?: SelectSubset<T, AdminFindManyArgs>
    ): Prisma.PrismaPromise<Array<AdminGetPayload<T>>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs>(
      args: SelectSubset<T, AdminCreateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs>(
      args?: SelectSubset<T, AdminCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs>(
      args: SelectSubset<T, AdminDeleteArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs>(
      args: SelectSubset<T, AdminUpdateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs>(
      args?: SelectSubset<T, AdminDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs>(
      args: SelectSubset<T, AdminUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs>(
      args: SelectSubset<T, AdminUpsertArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Admin base type for findUnique actions
   */
  export type AdminFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUnique
   */
  export interface AdminFindUniqueArgs extends AdminFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin base type for findFirst actions
   */
  export type AdminFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: Enumerable<AdminScalarFieldEnum>
  }

  /**
   * Admin findFirst
   */
  export interface AdminFindFirstArgs extends AdminFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs = {
    /**
     * The data used to create many Admins.
     */
    data: Enumerable<AdminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }


  /**
   * Admin without action
   */
  export type AdminArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    username: string | null
    full_name: string | null
    password: string | null
    email: string | null
    phone: string | null
    jkel: string | null
    tgl_lahir: string | null
    alamat: string | null
    ktp: string | null
    kode_pos: string | null
    token: string | null
  }

  export type UserMaxAggregateOutputType = {
    username: string | null
    full_name: string | null
    password: string | null
    email: string | null
    phone: string | null
    jkel: string | null
    tgl_lahir: string | null
    alamat: string | null
    ktp: string | null
    kode_pos: string | null
    token: string | null
  }

  export type UserCountAggregateOutputType = {
    username: number
    full_name: number
    password: number
    email: number
    phone: number
    jkel: number
    tgl_lahir: number
    alamat: number
    ktp: number
    kode_pos: number
    token: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    username?: true
    full_name?: true
    password?: true
    email?: true
    phone?: true
    jkel?: true
    tgl_lahir?: true
    alamat?: true
    ktp?: true
    kode_pos?: true
    token?: true
  }

  export type UserMaxAggregateInputType = {
    username?: true
    full_name?: true
    password?: true
    email?: true
    phone?: true
    jkel?: true
    tgl_lahir?: true
    alamat?: true
    ktp?: true
    kode_pos?: true
    token?: true
  }

  export type UserCountAggregateInputType = {
    username?: true
    full_name?: true
    password?: true
    email?: true
    phone?: true
    jkel?: true
    tgl_lahir?: true
    alamat?: true
    ktp?: true
    kode_pos?: true
    token?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    username: string
    full_name: string
    password: string
    email: string
    phone: string
    jkel: string | null
    tgl_lahir: string | null
    alamat: string | null
    ktp: string | null
    kode_pos: string | null
    token: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    username?: boolean
    full_name?: boolean
    password?: boolean
    email?: boolean
    phone?: boolean
    jkel?: boolean
    tgl_lahir?: boolean
    alamat?: boolean
    ktp?: boolean
    kode_pos?: boolean
    token?: boolean
    booking?: boolean | User$bookingArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    booking?: boolean | User$bookingArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'booking' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'booking' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const userWithUsernameOnly = await prisma.user.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    booking<T extends User$bookingArgs= {}>(args?: Subset<T, User$bookingArgs>): Prisma.PrismaPromise<Array<BookingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.booking
   */
  export type User$bookingArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    where?: BookingWhereInput
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Kota
   */


  export type AggregateKota = {
    _count: KotaCountAggregateOutputType | null
    _min: KotaMinAggregateOutputType | null
    _max: KotaMaxAggregateOutputType | null
  }

  export type KotaMinAggregateOutputType = {
    nm_kota: string | null
    about: string | null
    country: string | null
  }

  export type KotaMaxAggregateOutputType = {
    nm_kota: string | null
    about: string | null
    country: string | null
  }

  export type KotaCountAggregateOutputType = {
    nm_kota: number
    about: number
    country: number
    _all: number
  }


  export type KotaMinAggregateInputType = {
    nm_kota?: true
    about?: true
    country?: true
  }

  export type KotaMaxAggregateInputType = {
    nm_kota?: true
    about?: true
    country?: true
  }

  export type KotaCountAggregateInputType = {
    nm_kota?: true
    about?: true
    country?: true
    _all?: true
  }

  export type KotaAggregateArgs = {
    /**
     * Filter which Kota to aggregate.
     */
    where?: KotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kotas to fetch.
     */
    orderBy?: Enumerable<KotaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kotas
    **/
    _count?: true | KotaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KotaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KotaMaxAggregateInputType
  }

  export type GetKotaAggregateType<T extends KotaAggregateArgs> = {
        [P in keyof T & keyof AggregateKota]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKota[P]>
      : GetScalarType<T[P], AggregateKota[P]>
  }




  export type KotaGroupByArgs = {
    where?: KotaWhereInput
    orderBy?: Enumerable<KotaOrderByWithAggregationInput>
    by: KotaScalarFieldEnum[]
    having?: KotaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KotaCountAggregateInputType | true
    _min?: KotaMinAggregateInputType
    _max?: KotaMaxAggregateInputType
  }


  export type KotaGroupByOutputType = {
    nm_kota: string
    about: string
    country: string
    _count: KotaCountAggregateOutputType | null
    _min: KotaMinAggregateOutputType | null
    _max: KotaMaxAggregateOutputType | null
  }

  type GetKotaGroupByPayload<T extends KotaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<KotaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KotaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KotaGroupByOutputType[P]>
            : GetScalarType<T[P], KotaGroupByOutputType[P]>
        }
      >
    >


  export type KotaSelect = {
    nm_kota?: boolean
    about?: boolean
    country?: boolean
    destination?: boolean | Kota$destinationArgs
    _count?: boolean | KotaCountOutputTypeArgs
  }


  export type KotaInclude = {
    destination?: boolean | Kota$destinationArgs
    _count?: boolean | KotaCountOutputTypeArgs
  }

  export type KotaGetPayload<S extends boolean | null | undefined | KotaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Kota :
    S extends undefined ? never :
    S extends { include: any } & (KotaArgs | KotaFindManyArgs)
    ? Kota  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'destination' ? Array < DestinationGetPayload<S['include'][P]>>  :
        P extends '_count' ? KotaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (KotaArgs | KotaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'destination' ? Array < DestinationGetPayload<S['select'][P]>>  :
        P extends '_count' ? KotaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Kota ? Kota[P] : never
  } 
      : Kota


  type KotaCountArgs = 
    Omit<KotaFindManyArgs, 'select' | 'include'> & {
      select?: KotaCountAggregateInputType | true
    }

  export interface KotaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Kota that matches the filter.
     * @param {KotaFindUniqueArgs} args - Arguments to find a Kota
     * @example
     * // Get one Kota
     * const kota = await prisma.kota.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KotaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KotaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Kota'> extends True ? Prisma__KotaClient<KotaGetPayload<T>> : Prisma__KotaClient<KotaGetPayload<T> | null, null>

    /**
     * Find one Kota that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KotaFindUniqueOrThrowArgs} args - Arguments to find a Kota
     * @example
     * // Get one Kota
     * const kota = await prisma.kota.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KotaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, KotaFindUniqueOrThrowArgs>
    ): Prisma__KotaClient<KotaGetPayload<T>>

    /**
     * Find the first Kota that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KotaFindFirstArgs} args - Arguments to find a Kota
     * @example
     * // Get one Kota
     * const kota = await prisma.kota.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KotaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KotaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Kota'> extends True ? Prisma__KotaClient<KotaGetPayload<T>> : Prisma__KotaClient<KotaGetPayload<T> | null, null>

    /**
     * Find the first Kota that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KotaFindFirstOrThrowArgs} args - Arguments to find a Kota
     * @example
     * // Get one Kota
     * const kota = await prisma.kota.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KotaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, KotaFindFirstOrThrowArgs>
    ): Prisma__KotaClient<KotaGetPayload<T>>

    /**
     * Find zero or more Kotas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KotaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kotas
     * const kotas = await prisma.kota.findMany()
     * 
     * // Get first 10 Kotas
     * const kotas = await prisma.kota.findMany({ take: 10 })
     * 
     * // Only select the `nm_kota`
     * const kotaWithNm_kotaOnly = await prisma.kota.findMany({ select: { nm_kota: true } })
     * 
    **/
    findMany<T extends KotaFindManyArgs>(
      args?: SelectSubset<T, KotaFindManyArgs>
    ): Prisma.PrismaPromise<Array<KotaGetPayload<T>>>

    /**
     * Create a Kota.
     * @param {KotaCreateArgs} args - Arguments to create a Kota.
     * @example
     * // Create one Kota
     * const Kota = await prisma.kota.create({
     *   data: {
     *     // ... data to create a Kota
     *   }
     * })
     * 
    **/
    create<T extends KotaCreateArgs>(
      args: SelectSubset<T, KotaCreateArgs>
    ): Prisma__KotaClient<KotaGetPayload<T>>

    /**
     * Create many Kotas.
     *     @param {KotaCreateManyArgs} args - Arguments to create many Kotas.
     *     @example
     *     // Create many Kotas
     *     const kota = await prisma.kota.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KotaCreateManyArgs>(
      args?: SelectSubset<T, KotaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kota.
     * @param {KotaDeleteArgs} args - Arguments to delete one Kota.
     * @example
     * // Delete one Kota
     * const Kota = await prisma.kota.delete({
     *   where: {
     *     // ... filter to delete one Kota
     *   }
     * })
     * 
    **/
    delete<T extends KotaDeleteArgs>(
      args: SelectSubset<T, KotaDeleteArgs>
    ): Prisma__KotaClient<KotaGetPayload<T>>

    /**
     * Update one Kota.
     * @param {KotaUpdateArgs} args - Arguments to update one Kota.
     * @example
     * // Update one Kota
     * const kota = await prisma.kota.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KotaUpdateArgs>(
      args: SelectSubset<T, KotaUpdateArgs>
    ): Prisma__KotaClient<KotaGetPayload<T>>

    /**
     * Delete zero or more Kotas.
     * @param {KotaDeleteManyArgs} args - Arguments to filter Kotas to delete.
     * @example
     * // Delete a few Kotas
     * const { count } = await prisma.kota.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KotaDeleteManyArgs>(
      args?: SelectSubset<T, KotaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KotaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kotas
     * const kota = await prisma.kota.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KotaUpdateManyArgs>(
      args: SelectSubset<T, KotaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kota.
     * @param {KotaUpsertArgs} args - Arguments to update or create a Kota.
     * @example
     * // Update or create a Kota
     * const kota = await prisma.kota.upsert({
     *   create: {
     *     // ... data to create a Kota
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kota we want to update
     *   }
     * })
    **/
    upsert<T extends KotaUpsertArgs>(
      args: SelectSubset<T, KotaUpsertArgs>
    ): Prisma__KotaClient<KotaGetPayload<T>>

    /**
     * Count the number of Kotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KotaCountArgs} args - Arguments to filter Kotas to count.
     * @example
     * // Count the number of Kotas
     * const count = await prisma.kota.count({
     *   where: {
     *     // ... the filter for the Kotas we want to count
     *   }
     * })
    **/
    count<T extends KotaCountArgs>(
      args?: Subset<T, KotaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KotaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KotaAggregateArgs>(args: Subset<T, KotaAggregateArgs>): Prisma.PrismaPromise<GetKotaAggregateType<T>>

    /**
     * Group by Kota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KotaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KotaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KotaGroupByArgs['orderBy'] }
        : { orderBy?: KotaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Kota.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KotaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    destination<T extends Kota$destinationArgs= {}>(args?: Subset<T, Kota$destinationArgs>): Prisma.PrismaPromise<Array<DestinationGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Kota base type for findUnique actions
   */
  export type KotaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * Filter, which Kota to fetch.
     */
    where: KotaWhereUniqueInput
  }

  /**
   * Kota findUnique
   */
  export interface KotaFindUniqueArgs extends KotaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Kota findUniqueOrThrow
   */
  export type KotaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * Filter, which Kota to fetch.
     */
    where: KotaWhereUniqueInput
  }


  /**
   * Kota base type for findFirst actions
   */
  export type KotaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * Filter, which Kota to fetch.
     */
    where?: KotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kotas to fetch.
     */
    orderBy?: Enumerable<KotaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kotas.
     */
    cursor?: KotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kotas.
     */
    distinct?: Enumerable<KotaScalarFieldEnum>
  }

  /**
   * Kota findFirst
   */
  export interface KotaFindFirstArgs extends KotaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Kota findFirstOrThrow
   */
  export type KotaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * Filter, which Kota to fetch.
     */
    where?: KotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kotas to fetch.
     */
    orderBy?: Enumerable<KotaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kotas.
     */
    cursor?: KotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kotas.
     */
    distinct?: Enumerable<KotaScalarFieldEnum>
  }


  /**
   * Kota findMany
   */
  export type KotaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * Filter, which Kotas to fetch.
     */
    where?: KotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kotas to fetch.
     */
    orderBy?: Enumerable<KotaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kotas.
     */
    cursor?: KotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kotas.
     */
    skip?: number
    distinct?: Enumerable<KotaScalarFieldEnum>
  }


  /**
   * Kota create
   */
  export type KotaCreateArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * The data needed to create a Kota.
     */
    data: XOR<KotaCreateInput, KotaUncheckedCreateInput>
  }


  /**
   * Kota createMany
   */
  export type KotaCreateManyArgs = {
    /**
     * The data used to create many Kotas.
     */
    data: Enumerable<KotaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Kota update
   */
  export type KotaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * The data needed to update a Kota.
     */
    data: XOR<KotaUpdateInput, KotaUncheckedUpdateInput>
    /**
     * Choose, which Kota to update.
     */
    where: KotaWhereUniqueInput
  }


  /**
   * Kota updateMany
   */
  export type KotaUpdateManyArgs = {
    /**
     * The data used to update Kotas.
     */
    data: XOR<KotaUpdateManyMutationInput, KotaUncheckedUpdateManyInput>
    /**
     * Filter which Kotas to update
     */
    where?: KotaWhereInput
  }


  /**
   * Kota upsert
   */
  export type KotaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * The filter to search for the Kota to update in case it exists.
     */
    where: KotaWhereUniqueInput
    /**
     * In case the Kota found by the `where` argument doesn't exist, create a new Kota with this data.
     */
    create: XOR<KotaCreateInput, KotaUncheckedCreateInput>
    /**
     * In case the Kota was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KotaUpdateInput, KotaUncheckedUpdateInput>
  }


  /**
   * Kota delete
   */
  export type KotaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
    /**
     * Filter which Kota to delete.
     */
    where: KotaWhereUniqueInput
  }


  /**
   * Kota deleteMany
   */
  export type KotaDeleteManyArgs = {
    /**
     * Filter which Kotas to delete
     */
    where?: KotaWhereInput
  }


  /**
   * Kota.destination
   */
  export type Kota$destinationArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    where?: DestinationWhereInput
    orderBy?: Enumerable<DestinationOrderByWithRelationInput>
    cursor?: DestinationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DestinationScalarFieldEnum>
  }


  /**
   * Kota without action
   */
  export type KotaArgs = {
    /**
     * Select specific fields to fetch from the Kota
     */
    select?: KotaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KotaInclude | null
  }



  /**
   * Model Destination
   */


  export type AggregateDestination = {
    _count: DestinationCountAggregateOutputType | null
    _avg: DestinationAvgAggregateOutputType | null
    _sum: DestinationSumAggregateOutputType | null
    _min: DestinationMinAggregateOutputType | null
    _max: DestinationMaxAggregateOutputType | null
  }

  export type DestinationAvgAggregateOutputType = {
    id: number | null
  }

  export type DestinationSumAggregateOutputType = {
    id: number | null
  }

  export type DestinationMinAggregateOutputType = {
    id: number | null
    nm_destination: string | null
    about: string | null
    nm_kota: string | null
  }

  export type DestinationMaxAggregateOutputType = {
    id: number | null
    nm_destination: string | null
    about: string | null
    nm_kota: string | null
  }

  export type DestinationCountAggregateOutputType = {
    id: number
    nm_destination: number
    about: number
    nm_kota: number
    _all: number
  }


  export type DestinationAvgAggregateInputType = {
    id?: true
  }

  export type DestinationSumAggregateInputType = {
    id?: true
  }

  export type DestinationMinAggregateInputType = {
    id?: true
    nm_destination?: true
    about?: true
    nm_kota?: true
  }

  export type DestinationMaxAggregateInputType = {
    id?: true
    nm_destination?: true
    about?: true
    nm_kota?: true
  }

  export type DestinationCountAggregateInputType = {
    id?: true
    nm_destination?: true
    about?: true
    nm_kota?: true
    _all?: true
  }

  export type DestinationAggregateArgs = {
    /**
     * Filter which Destination to aggregate.
     */
    where?: DestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinations to fetch.
     */
    orderBy?: Enumerable<DestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Destinations
    **/
    _count?: true | DestinationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DestinationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DestinationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DestinationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DestinationMaxAggregateInputType
  }

  export type GetDestinationAggregateType<T extends DestinationAggregateArgs> = {
        [P in keyof T & keyof AggregateDestination]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDestination[P]>
      : GetScalarType<T[P], AggregateDestination[P]>
  }




  export type DestinationGroupByArgs = {
    where?: DestinationWhereInput
    orderBy?: Enumerable<DestinationOrderByWithAggregationInput>
    by: DestinationScalarFieldEnum[]
    having?: DestinationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DestinationCountAggregateInputType | true
    _avg?: DestinationAvgAggregateInputType
    _sum?: DestinationSumAggregateInputType
    _min?: DestinationMinAggregateInputType
    _max?: DestinationMaxAggregateInputType
  }


  export type DestinationGroupByOutputType = {
    id: number
    nm_destination: string
    about: string
    nm_kota: string
    _count: DestinationCountAggregateOutputType | null
    _avg: DestinationAvgAggregateOutputType | null
    _sum: DestinationSumAggregateOutputType | null
    _min: DestinationMinAggregateOutputType | null
    _max: DestinationMaxAggregateOutputType | null
  }

  type GetDestinationGroupByPayload<T extends DestinationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DestinationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DestinationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DestinationGroupByOutputType[P]>
            : GetScalarType<T[P], DestinationGroupByOutputType[P]>
        }
      >
    >


  export type DestinationSelect = {
    id?: boolean
    nm_destination?: boolean
    about?: boolean
    nm_kota?: boolean
    kota?: boolean | KotaArgs
    hotel?: boolean | Destination$hotelArgs
    _count?: boolean | DestinationCountOutputTypeArgs
  }


  export type DestinationInclude = {
    kota?: boolean | KotaArgs
    hotel?: boolean | Destination$hotelArgs
    _count?: boolean | DestinationCountOutputTypeArgs
  }

  export type DestinationGetPayload<S extends boolean | null | undefined | DestinationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Destination :
    S extends undefined ? never :
    S extends { include: any } & (DestinationArgs | DestinationFindManyArgs)
    ? Destination  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'kota' ? KotaGetPayload<S['include'][P]> :
        P extends 'hotel' ? Array < HotelGetPayload<S['include'][P]>>  :
        P extends '_count' ? DestinationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DestinationArgs | DestinationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'kota' ? KotaGetPayload<S['select'][P]> :
        P extends 'hotel' ? Array < HotelGetPayload<S['select'][P]>>  :
        P extends '_count' ? DestinationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Destination ? Destination[P] : never
  } 
      : Destination


  type DestinationCountArgs = 
    Omit<DestinationFindManyArgs, 'select' | 'include'> & {
      select?: DestinationCountAggregateInputType | true
    }

  export interface DestinationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Destination that matches the filter.
     * @param {DestinationFindUniqueArgs} args - Arguments to find a Destination
     * @example
     * // Get one Destination
     * const destination = await prisma.destination.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DestinationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DestinationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Destination'> extends True ? Prisma__DestinationClient<DestinationGetPayload<T>> : Prisma__DestinationClient<DestinationGetPayload<T> | null, null>

    /**
     * Find one Destination that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DestinationFindUniqueOrThrowArgs} args - Arguments to find a Destination
     * @example
     * // Get one Destination
     * const destination = await prisma.destination.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DestinationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DestinationFindUniqueOrThrowArgs>
    ): Prisma__DestinationClient<DestinationGetPayload<T>>

    /**
     * Find the first Destination that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationFindFirstArgs} args - Arguments to find a Destination
     * @example
     * // Get one Destination
     * const destination = await prisma.destination.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DestinationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DestinationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Destination'> extends True ? Prisma__DestinationClient<DestinationGetPayload<T>> : Prisma__DestinationClient<DestinationGetPayload<T> | null, null>

    /**
     * Find the first Destination that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationFindFirstOrThrowArgs} args - Arguments to find a Destination
     * @example
     * // Get one Destination
     * const destination = await prisma.destination.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DestinationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DestinationFindFirstOrThrowArgs>
    ): Prisma__DestinationClient<DestinationGetPayload<T>>

    /**
     * Find zero or more Destinations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Destinations
     * const destinations = await prisma.destination.findMany()
     * 
     * // Get first 10 Destinations
     * const destinations = await prisma.destination.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const destinationWithIdOnly = await prisma.destination.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DestinationFindManyArgs>(
      args?: SelectSubset<T, DestinationFindManyArgs>
    ): Prisma.PrismaPromise<Array<DestinationGetPayload<T>>>

    /**
     * Create a Destination.
     * @param {DestinationCreateArgs} args - Arguments to create a Destination.
     * @example
     * // Create one Destination
     * const Destination = await prisma.destination.create({
     *   data: {
     *     // ... data to create a Destination
     *   }
     * })
     * 
    **/
    create<T extends DestinationCreateArgs>(
      args: SelectSubset<T, DestinationCreateArgs>
    ): Prisma__DestinationClient<DestinationGetPayload<T>>

    /**
     * Create many Destinations.
     *     @param {DestinationCreateManyArgs} args - Arguments to create many Destinations.
     *     @example
     *     // Create many Destinations
     *     const destination = await prisma.destination.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DestinationCreateManyArgs>(
      args?: SelectSubset<T, DestinationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Destination.
     * @param {DestinationDeleteArgs} args - Arguments to delete one Destination.
     * @example
     * // Delete one Destination
     * const Destination = await prisma.destination.delete({
     *   where: {
     *     // ... filter to delete one Destination
     *   }
     * })
     * 
    **/
    delete<T extends DestinationDeleteArgs>(
      args: SelectSubset<T, DestinationDeleteArgs>
    ): Prisma__DestinationClient<DestinationGetPayload<T>>

    /**
     * Update one Destination.
     * @param {DestinationUpdateArgs} args - Arguments to update one Destination.
     * @example
     * // Update one Destination
     * const destination = await prisma.destination.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DestinationUpdateArgs>(
      args: SelectSubset<T, DestinationUpdateArgs>
    ): Prisma__DestinationClient<DestinationGetPayload<T>>

    /**
     * Delete zero or more Destinations.
     * @param {DestinationDeleteManyArgs} args - Arguments to filter Destinations to delete.
     * @example
     * // Delete a few Destinations
     * const { count } = await prisma.destination.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DestinationDeleteManyArgs>(
      args?: SelectSubset<T, DestinationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Destinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Destinations
     * const destination = await prisma.destination.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DestinationUpdateManyArgs>(
      args: SelectSubset<T, DestinationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Destination.
     * @param {DestinationUpsertArgs} args - Arguments to update or create a Destination.
     * @example
     * // Update or create a Destination
     * const destination = await prisma.destination.upsert({
     *   create: {
     *     // ... data to create a Destination
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Destination we want to update
     *   }
     * })
    **/
    upsert<T extends DestinationUpsertArgs>(
      args: SelectSubset<T, DestinationUpsertArgs>
    ): Prisma__DestinationClient<DestinationGetPayload<T>>

    /**
     * Count the number of Destinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationCountArgs} args - Arguments to filter Destinations to count.
     * @example
     * // Count the number of Destinations
     * const count = await prisma.destination.count({
     *   where: {
     *     // ... the filter for the Destinations we want to count
     *   }
     * })
    **/
    count<T extends DestinationCountArgs>(
      args?: Subset<T, DestinationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DestinationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Destination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DestinationAggregateArgs>(args: Subset<T, DestinationAggregateArgs>): Prisma.PrismaPromise<GetDestinationAggregateType<T>>

    /**
     * Group by Destination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DestinationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DestinationGroupByArgs['orderBy'] }
        : { orderBy?: DestinationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DestinationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestinationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Destination.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DestinationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    kota<T extends KotaArgs= {}>(args?: Subset<T, KotaArgs>): Prisma__KotaClient<KotaGetPayload<T> | Null>;

    hotel<T extends Destination$hotelArgs= {}>(args?: Subset<T, Destination$hotelArgs>): Prisma.PrismaPromise<Array<HotelGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Destination base type for findUnique actions
   */
  export type DestinationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * Filter, which Destination to fetch.
     */
    where: DestinationWhereUniqueInput
  }

  /**
   * Destination findUnique
   */
  export interface DestinationFindUniqueArgs extends DestinationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Destination findUniqueOrThrow
   */
  export type DestinationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * Filter, which Destination to fetch.
     */
    where: DestinationWhereUniqueInput
  }


  /**
   * Destination base type for findFirst actions
   */
  export type DestinationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * Filter, which Destination to fetch.
     */
    where?: DestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinations to fetch.
     */
    orderBy?: Enumerable<DestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Destinations.
     */
    cursor?: DestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Destinations.
     */
    distinct?: Enumerable<DestinationScalarFieldEnum>
  }

  /**
   * Destination findFirst
   */
  export interface DestinationFindFirstArgs extends DestinationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Destination findFirstOrThrow
   */
  export type DestinationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * Filter, which Destination to fetch.
     */
    where?: DestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinations to fetch.
     */
    orderBy?: Enumerable<DestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Destinations.
     */
    cursor?: DestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Destinations.
     */
    distinct?: Enumerable<DestinationScalarFieldEnum>
  }


  /**
   * Destination findMany
   */
  export type DestinationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * Filter, which Destinations to fetch.
     */
    where?: DestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinations to fetch.
     */
    orderBy?: Enumerable<DestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Destinations.
     */
    cursor?: DestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinations.
     */
    skip?: number
    distinct?: Enumerable<DestinationScalarFieldEnum>
  }


  /**
   * Destination create
   */
  export type DestinationCreateArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * The data needed to create a Destination.
     */
    data: XOR<DestinationCreateInput, DestinationUncheckedCreateInput>
  }


  /**
   * Destination createMany
   */
  export type DestinationCreateManyArgs = {
    /**
     * The data used to create many Destinations.
     */
    data: Enumerable<DestinationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Destination update
   */
  export type DestinationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * The data needed to update a Destination.
     */
    data: XOR<DestinationUpdateInput, DestinationUncheckedUpdateInput>
    /**
     * Choose, which Destination to update.
     */
    where: DestinationWhereUniqueInput
  }


  /**
   * Destination updateMany
   */
  export type DestinationUpdateManyArgs = {
    /**
     * The data used to update Destinations.
     */
    data: XOR<DestinationUpdateManyMutationInput, DestinationUncheckedUpdateManyInput>
    /**
     * Filter which Destinations to update
     */
    where?: DestinationWhereInput
  }


  /**
   * Destination upsert
   */
  export type DestinationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * The filter to search for the Destination to update in case it exists.
     */
    where: DestinationWhereUniqueInput
    /**
     * In case the Destination found by the `where` argument doesn't exist, create a new Destination with this data.
     */
    create: XOR<DestinationCreateInput, DestinationUncheckedCreateInput>
    /**
     * In case the Destination was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DestinationUpdateInput, DestinationUncheckedUpdateInput>
  }


  /**
   * Destination delete
   */
  export type DestinationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
    /**
     * Filter which Destination to delete.
     */
    where: DestinationWhereUniqueInput
  }


  /**
   * Destination deleteMany
   */
  export type DestinationDeleteManyArgs = {
    /**
     * Filter which Destinations to delete
     */
    where?: DestinationWhereInput
  }


  /**
   * Destination.hotel
   */
  export type Destination$hotelArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    where?: HotelWhereInput
    orderBy?: Enumerable<HotelOrderByWithRelationInput>
    cursor?: HotelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HotelScalarFieldEnum>
  }


  /**
   * Destination without action
   */
  export type DestinationArgs = {
    /**
     * Select specific fields to fetch from the Destination
     */
    select?: DestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DestinationInclude | null
  }



  /**
   * Model Hotel
   */


  export type AggregateHotel = {
    _count: HotelCountAggregateOutputType | null
    _avg: HotelAvgAggregateOutputType | null
    _sum: HotelSumAggregateOutputType | null
    _min: HotelMinAggregateOutputType | null
    _max: HotelMaxAggregateOutputType | null
  }

  export type HotelAvgAggregateOutputType = {
    id: number | null
    id_destination: number | null
  }

  export type HotelSumAggregateOutputType = {
    id: number | null
    id_destination: number | null
  }

  export type HotelMinAggregateOutputType = {
    id: number | null
    nm_hotel: string | null
    about: string | null
    alamat: string | null
    price: string | null
    id_destination: number | null
  }

  export type HotelMaxAggregateOutputType = {
    id: number | null
    nm_hotel: string | null
    about: string | null
    alamat: string | null
    price: string | null
    id_destination: number | null
  }

  export type HotelCountAggregateOutputType = {
    id: number
    nm_hotel: number
    about: number
    alamat: number
    price: number
    id_destination: number
    _all: number
  }


  export type HotelAvgAggregateInputType = {
    id?: true
    id_destination?: true
  }

  export type HotelSumAggregateInputType = {
    id?: true
    id_destination?: true
  }

  export type HotelMinAggregateInputType = {
    id?: true
    nm_hotel?: true
    about?: true
    alamat?: true
    price?: true
    id_destination?: true
  }

  export type HotelMaxAggregateInputType = {
    id?: true
    nm_hotel?: true
    about?: true
    alamat?: true
    price?: true
    id_destination?: true
  }

  export type HotelCountAggregateInputType = {
    id?: true
    nm_hotel?: true
    about?: true
    alamat?: true
    price?: true
    id_destination?: true
    _all?: true
  }

  export type HotelAggregateArgs = {
    /**
     * Filter which Hotel to aggregate.
     */
    where?: HotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hotels to fetch.
     */
    orderBy?: Enumerable<HotelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hotels
    **/
    _count?: true | HotelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HotelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HotelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HotelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HotelMaxAggregateInputType
  }

  export type GetHotelAggregateType<T extends HotelAggregateArgs> = {
        [P in keyof T & keyof AggregateHotel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHotel[P]>
      : GetScalarType<T[P], AggregateHotel[P]>
  }




  export type HotelGroupByArgs = {
    where?: HotelWhereInput
    orderBy?: Enumerable<HotelOrderByWithAggregationInput>
    by: HotelScalarFieldEnum[]
    having?: HotelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HotelCountAggregateInputType | true
    _avg?: HotelAvgAggregateInputType
    _sum?: HotelSumAggregateInputType
    _min?: HotelMinAggregateInputType
    _max?: HotelMaxAggregateInputType
  }


  export type HotelGroupByOutputType = {
    id: number
    nm_hotel: string
    about: string
    alamat: string
    price: string
    id_destination: number
    _count: HotelCountAggregateOutputType | null
    _avg: HotelAvgAggregateOutputType | null
    _sum: HotelSumAggregateOutputType | null
    _min: HotelMinAggregateOutputType | null
    _max: HotelMaxAggregateOutputType | null
  }

  type GetHotelGroupByPayload<T extends HotelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HotelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HotelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HotelGroupByOutputType[P]>
            : GetScalarType<T[P], HotelGroupByOutputType[P]>
        }
      >
    >


  export type HotelSelect = {
    id?: boolean
    nm_hotel?: boolean
    about?: boolean
    alamat?: boolean
    price?: boolean
    id_destination?: boolean
    booking?: boolean | Hotel$bookingArgs
    destination?: boolean | DestinationArgs
    _count?: boolean | HotelCountOutputTypeArgs
  }


  export type HotelInclude = {
    booking?: boolean | Hotel$bookingArgs
    destination?: boolean | DestinationArgs
    _count?: boolean | HotelCountOutputTypeArgs
  }

  export type HotelGetPayload<S extends boolean | null | undefined | HotelArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Hotel :
    S extends undefined ? never :
    S extends { include: any } & (HotelArgs | HotelFindManyArgs)
    ? Hotel  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'booking' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'destination' ? DestinationGetPayload<S['include'][P]> :
        P extends '_count' ? HotelCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HotelArgs | HotelFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'booking' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'destination' ? DestinationGetPayload<S['select'][P]> :
        P extends '_count' ? HotelCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Hotel ? Hotel[P] : never
  } 
      : Hotel


  type HotelCountArgs = 
    Omit<HotelFindManyArgs, 'select' | 'include'> & {
      select?: HotelCountAggregateInputType | true
    }

  export interface HotelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Hotel that matches the filter.
     * @param {HotelFindUniqueArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HotelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HotelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Hotel'> extends True ? Prisma__HotelClient<HotelGetPayload<T>> : Prisma__HotelClient<HotelGetPayload<T> | null, null>

    /**
     * Find one Hotel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HotelFindUniqueOrThrowArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HotelFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HotelFindUniqueOrThrowArgs>
    ): Prisma__HotelClient<HotelGetPayload<T>>

    /**
     * Find the first Hotel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelFindFirstArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HotelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HotelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Hotel'> extends True ? Prisma__HotelClient<HotelGetPayload<T>> : Prisma__HotelClient<HotelGetPayload<T> | null, null>

    /**
     * Find the first Hotel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelFindFirstOrThrowArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HotelFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HotelFindFirstOrThrowArgs>
    ): Prisma__HotelClient<HotelGetPayload<T>>

    /**
     * Find zero or more Hotels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hotels
     * const hotels = await prisma.hotel.findMany()
     * 
     * // Get first 10 Hotels
     * const hotels = await prisma.hotel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hotelWithIdOnly = await prisma.hotel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HotelFindManyArgs>(
      args?: SelectSubset<T, HotelFindManyArgs>
    ): Prisma.PrismaPromise<Array<HotelGetPayload<T>>>

    /**
     * Create a Hotel.
     * @param {HotelCreateArgs} args - Arguments to create a Hotel.
     * @example
     * // Create one Hotel
     * const Hotel = await prisma.hotel.create({
     *   data: {
     *     // ... data to create a Hotel
     *   }
     * })
     * 
    **/
    create<T extends HotelCreateArgs>(
      args: SelectSubset<T, HotelCreateArgs>
    ): Prisma__HotelClient<HotelGetPayload<T>>

    /**
     * Create many Hotels.
     *     @param {HotelCreateManyArgs} args - Arguments to create many Hotels.
     *     @example
     *     // Create many Hotels
     *     const hotel = await prisma.hotel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HotelCreateManyArgs>(
      args?: SelectSubset<T, HotelCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hotel.
     * @param {HotelDeleteArgs} args - Arguments to delete one Hotel.
     * @example
     * // Delete one Hotel
     * const Hotel = await prisma.hotel.delete({
     *   where: {
     *     // ... filter to delete one Hotel
     *   }
     * })
     * 
    **/
    delete<T extends HotelDeleteArgs>(
      args: SelectSubset<T, HotelDeleteArgs>
    ): Prisma__HotelClient<HotelGetPayload<T>>

    /**
     * Update one Hotel.
     * @param {HotelUpdateArgs} args - Arguments to update one Hotel.
     * @example
     * // Update one Hotel
     * const hotel = await prisma.hotel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HotelUpdateArgs>(
      args: SelectSubset<T, HotelUpdateArgs>
    ): Prisma__HotelClient<HotelGetPayload<T>>

    /**
     * Delete zero or more Hotels.
     * @param {HotelDeleteManyArgs} args - Arguments to filter Hotels to delete.
     * @example
     * // Delete a few Hotels
     * const { count } = await prisma.hotel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HotelDeleteManyArgs>(
      args?: SelectSubset<T, HotelDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hotels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hotels
     * const hotel = await prisma.hotel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HotelUpdateManyArgs>(
      args: SelectSubset<T, HotelUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hotel.
     * @param {HotelUpsertArgs} args - Arguments to update or create a Hotel.
     * @example
     * // Update or create a Hotel
     * const hotel = await prisma.hotel.upsert({
     *   create: {
     *     // ... data to create a Hotel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hotel we want to update
     *   }
     * })
    **/
    upsert<T extends HotelUpsertArgs>(
      args: SelectSubset<T, HotelUpsertArgs>
    ): Prisma__HotelClient<HotelGetPayload<T>>

    /**
     * Count the number of Hotels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelCountArgs} args - Arguments to filter Hotels to count.
     * @example
     * // Count the number of Hotels
     * const count = await prisma.hotel.count({
     *   where: {
     *     // ... the filter for the Hotels we want to count
     *   }
     * })
    **/
    count<T extends HotelCountArgs>(
      args?: Subset<T, HotelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HotelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hotel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HotelAggregateArgs>(args: Subset<T, HotelAggregateArgs>): Prisma.PrismaPromise<GetHotelAggregateType<T>>

    /**
     * Group by Hotel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HotelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HotelGroupByArgs['orderBy'] }
        : { orderBy?: HotelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HotelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHotelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Hotel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HotelClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    booking<T extends Hotel$bookingArgs= {}>(args?: Subset<T, Hotel$bookingArgs>): Prisma.PrismaPromise<Array<BookingGetPayload<T>>| Null>;

    destination<T extends DestinationArgs= {}>(args?: Subset<T, DestinationArgs>): Prisma__DestinationClient<DestinationGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Hotel base type for findUnique actions
   */
  export type HotelFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * Filter, which Hotel to fetch.
     */
    where: HotelWhereUniqueInput
  }

  /**
   * Hotel findUnique
   */
  export interface HotelFindUniqueArgs extends HotelFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Hotel findUniqueOrThrow
   */
  export type HotelFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * Filter, which Hotel to fetch.
     */
    where: HotelWhereUniqueInput
  }


  /**
   * Hotel base type for findFirst actions
   */
  export type HotelFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * Filter, which Hotel to fetch.
     */
    where?: HotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hotels to fetch.
     */
    orderBy?: Enumerable<HotelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hotels.
     */
    cursor?: HotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hotels.
     */
    distinct?: Enumerable<HotelScalarFieldEnum>
  }

  /**
   * Hotel findFirst
   */
  export interface HotelFindFirstArgs extends HotelFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Hotel findFirstOrThrow
   */
  export type HotelFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * Filter, which Hotel to fetch.
     */
    where?: HotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hotels to fetch.
     */
    orderBy?: Enumerable<HotelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hotels.
     */
    cursor?: HotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hotels.
     */
    distinct?: Enumerable<HotelScalarFieldEnum>
  }


  /**
   * Hotel findMany
   */
  export type HotelFindManyArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * Filter, which Hotels to fetch.
     */
    where?: HotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hotels to fetch.
     */
    orderBy?: Enumerable<HotelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hotels.
     */
    cursor?: HotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hotels.
     */
    skip?: number
    distinct?: Enumerable<HotelScalarFieldEnum>
  }


  /**
   * Hotel create
   */
  export type HotelCreateArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * The data needed to create a Hotel.
     */
    data: XOR<HotelCreateInput, HotelUncheckedCreateInput>
  }


  /**
   * Hotel createMany
   */
  export type HotelCreateManyArgs = {
    /**
     * The data used to create many Hotels.
     */
    data: Enumerable<HotelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Hotel update
   */
  export type HotelUpdateArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * The data needed to update a Hotel.
     */
    data: XOR<HotelUpdateInput, HotelUncheckedUpdateInput>
    /**
     * Choose, which Hotel to update.
     */
    where: HotelWhereUniqueInput
  }


  /**
   * Hotel updateMany
   */
  export type HotelUpdateManyArgs = {
    /**
     * The data used to update Hotels.
     */
    data: XOR<HotelUpdateManyMutationInput, HotelUncheckedUpdateManyInput>
    /**
     * Filter which Hotels to update
     */
    where?: HotelWhereInput
  }


  /**
   * Hotel upsert
   */
  export type HotelUpsertArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * The filter to search for the Hotel to update in case it exists.
     */
    where: HotelWhereUniqueInput
    /**
     * In case the Hotel found by the `where` argument doesn't exist, create a new Hotel with this data.
     */
    create: XOR<HotelCreateInput, HotelUncheckedCreateInput>
    /**
     * In case the Hotel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HotelUpdateInput, HotelUncheckedUpdateInput>
  }


  /**
   * Hotel delete
   */
  export type HotelDeleteArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
    /**
     * Filter which Hotel to delete.
     */
    where: HotelWhereUniqueInput
  }


  /**
   * Hotel deleteMany
   */
  export type HotelDeleteManyArgs = {
    /**
     * Filter which Hotels to delete
     */
    where?: HotelWhereInput
  }


  /**
   * Hotel.booking
   */
  export type Hotel$bookingArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    where?: BookingWhereInput
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Hotel without action
   */
  export type HotelArgs = {
    /**
     * Select specific fields to fetch from the Hotel
     */
    select?: HotelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HotelInclude | null
  }



  /**
   * Model Booking
   */


  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id_booking: number | null
    id_hotel: number | null
  }

  export type BookingSumAggregateOutputType = {
    id_booking: number | null
    id_hotel: number | null
  }

  export type BookingMinAggregateOutputType = {
    id_booking: number | null
    check_in: Date | null
    check_out: Date | null
    price: string | null
    username: string | null
    id_hotel: number | null
  }

  export type BookingMaxAggregateOutputType = {
    id_booking: number | null
    check_in: Date | null
    check_out: Date | null
    price: string | null
    username: string | null
    id_hotel: number | null
  }

  export type BookingCountAggregateOutputType = {
    id_booking: number
    check_in: number
    check_out: number
    price: number
    username: number
    id_hotel: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id_booking?: true
    id_hotel?: true
  }

  export type BookingSumAggregateInputType = {
    id_booking?: true
    id_hotel?: true
  }

  export type BookingMinAggregateInputType = {
    id_booking?: true
    check_in?: true
    check_out?: true
    price?: true
    username?: true
    id_hotel?: true
  }

  export type BookingMaxAggregateInputType = {
    id_booking?: true
    check_in?: true
    check_out?: true
    price?: true
    username?: true
    id_hotel?: true
  }

  export type BookingCountAggregateInputType = {
    id_booking?: true
    check_in?: true
    check_out?: true
    price?: true
    username?: true
    id_hotel?: true
    _all?: true
  }

  export type BookingAggregateArgs = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs = {
    where?: BookingWhereInput
    orderBy?: Enumerable<BookingOrderByWithAggregationInput>
    by: BookingScalarFieldEnum[]
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }


  export type BookingGroupByOutputType = {
    id_booking: number
    check_in: Date
    check_out: Date
    price: string
    username: string
    id_hotel: number
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect = {
    id_booking?: boolean
    check_in?: boolean
    check_out?: boolean
    price?: boolean
    username?: boolean
    id_hotel?: boolean
    hotel?: boolean | HotelArgs
    user?: boolean | UserArgs
  }


  export type BookingInclude = {
    hotel?: boolean | HotelArgs
    user?: boolean | UserArgs
  }

  export type BookingGetPayload<S extends boolean | null | undefined | BookingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Booking :
    S extends undefined ? never :
    S extends { include: any } & (BookingArgs | BookingFindManyArgs)
    ? Booking  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'hotel' ? HotelGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BookingArgs | BookingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'hotel' ? HotelGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Booking ? Booking[P] : never
  } 
      : Booking


  type BookingCountArgs = 
    Omit<BookingFindManyArgs, 'select' | 'include'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Booking'> extends True ? Prisma__BookingClient<BookingGetPayload<T>> : Prisma__BookingClient<BookingGetPayload<T> | null, null>

    /**
     * Find one Booking that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookingFindUniqueOrThrowArgs>
    ): Prisma__BookingClient<BookingGetPayload<T>>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Booking'> extends True ? Prisma__BookingClient<BookingGetPayload<T>> : Prisma__BookingClient<BookingGetPayload<T> | null, null>

    /**
     * Find the first Booking that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookingFindFirstOrThrowArgs>
    ): Prisma__BookingClient<BookingGetPayload<T>>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id_booking`
     * const bookingWithId_bookingOnly = await prisma.booking.findMany({ select: { id_booking: true } })
     * 
    **/
    findMany<T extends BookingFindManyArgs>(
      args?: SelectSubset<T, BookingFindManyArgs>
    ): Prisma.PrismaPromise<Array<BookingGetPayload<T>>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends BookingCreateArgs>(
      args: SelectSubset<T, BookingCreateArgs>
    ): Prisma__BookingClient<BookingGetPayload<T>>

    /**
     * Create many Bookings.
     *     @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookingCreateManyArgs>(
      args?: SelectSubset<T, BookingCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends BookingDeleteArgs>(
      args: SelectSubset<T, BookingDeleteArgs>
    ): Prisma__BookingClient<BookingGetPayload<T>>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookingUpdateArgs>(
      args: SelectSubset<T, BookingUpdateArgs>
    ): Prisma__BookingClient<BookingGetPayload<T>>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookingDeleteManyArgs>(
      args?: SelectSubset<T, BookingDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookingUpdateManyArgs>(
      args: SelectSubset<T, BookingUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends BookingUpsertArgs>(
      args: SelectSubset<T, BookingUpsertArgs>
    ): Prisma__BookingClient<BookingGetPayload<T>>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookingClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    hotel<T extends HotelArgs= {}>(args?: Subset<T, HotelArgs>): Prisma__HotelClient<HotelGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Booking base type for findUnique actions
   */
  export type BookingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findUnique
   */
  export interface BookingFindUniqueArgs extends BookingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }


  /**
   * Booking base type for findFirst actions
   */
  export type BookingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: Enumerable<BookingScalarFieldEnum>
  }

  /**
   * Booking findFirst
   */
  export interface BookingFindFirstArgs extends BookingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking findMany
   */
  export type BookingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking create
   */
  export type BookingCreateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }


  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs = {
    /**
     * The data used to create many Bookings.
     */
    data: Enumerable<BookingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Booking update
   */
  export type BookingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }


  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
  }


  /**
   * Booking upsert
   */
  export type BookingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }


  /**
   * Booking delete
   */
  export type BookingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }


  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
  }


  /**
   * Booking without action
   */
  export type BookingArgs = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookingInclude | null
  }



  /**
   * Enums
   */

  export const AdminScalarFieldEnum: {
    username: 'username',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id_booking: 'id_booking',
    check_in: 'check_in',
    check_out: 'check_out',
    price: 'price',
    username: 'username',
    id_hotel: 'id_hotel'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const DestinationScalarFieldEnum: {
    id: 'id',
    nm_destination: 'nm_destination',
    about: 'about',
    nm_kota: 'nm_kota'
  };

  export type DestinationScalarFieldEnum = (typeof DestinationScalarFieldEnum)[keyof typeof DestinationScalarFieldEnum]


  export const HotelScalarFieldEnum: {
    id: 'id',
    nm_hotel: 'nm_hotel',
    about: 'about',
    alamat: 'alamat',
    price: 'price',
    id_destination: 'id_destination'
  };

  export type HotelScalarFieldEnum = (typeof HotelScalarFieldEnum)[keyof typeof HotelScalarFieldEnum]


  export const KotaScalarFieldEnum: {
    nm_kota: 'nm_kota',
    about: 'about',
    country: 'country'
  };

  export type KotaScalarFieldEnum = (typeof KotaScalarFieldEnum)[keyof typeof KotaScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    username: 'username',
    full_name: 'full_name',
    password: 'password',
    email: 'email',
    phone: 'phone',
    jkel: 'jkel',
    tgl_lahir: 'tgl_lahir',
    alamat: 'alamat',
    ktp: 'ktp',
    kode_pos: 'kode_pos',
    token: 'token'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: Enumerable<AdminWhereInput>
    OR?: Enumerable<AdminWhereInput>
    NOT?: Enumerable<AdminWhereInput>
    username?: StringFilter | string
    password?: StringFilter | string
  }

  export type AdminOrderByWithRelationInput = {
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminWhereUniqueInput = {
    username?: string
  }

  export type AdminOrderByWithAggregationInput = {
    username?: SortOrder
    password?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    username?: StringFilter | string
    full_name?: StringFilter | string
    password?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    jkel?: StringNullableFilter | string | null
    tgl_lahir?: StringNullableFilter | string | null
    alamat?: StringNullableFilter | string | null
    ktp?: StringNullableFilter | string | null
    kode_pos?: StringNullableFilter | string | null
    token?: StringNullableFilter | string | null
    booking?: BookingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    username?: SortOrder
    full_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    jkel?: SortOrder
    tgl_lahir?: SortOrder
    alamat?: SortOrder
    ktp?: SortOrder
    kode_pos?: SortOrder
    token?: SortOrder
    booking?: BookingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    username?: SortOrder
    full_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    jkel?: SortOrder
    tgl_lahir?: SortOrder
    alamat?: SortOrder
    ktp?: SortOrder
    kode_pos?: SortOrder
    token?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    full_name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    jkel?: StringNullableWithAggregatesFilter | string | null
    tgl_lahir?: StringNullableWithAggregatesFilter | string | null
    alamat?: StringNullableWithAggregatesFilter | string | null
    ktp?: StringNullableWithAggregatesFilter | string | null
    kode_pos?: StringNullableWithAggregatesFilter | string | null
    token?: StringNullableWithAggregatesFilter | string | null
  }

  export type KotaWhereInput = {
    AND?: Enumerable<KotaWhereInput>
    OR?: Enumerable<KotaWhereInput>
    NOT?: Enumerable<KotaWhereInput>
    nm_kota?: StringFilter | string
    about?: StringFilter | string
    country?: StringFilter | string
    destination?: DestinationListRelationFilter
  }

  export type KotaOrderByWithRelationInput = {
    nm_kota?: SortOrder
    about?: SortOrder
    country?: SortOrder
    destination?: DestinationOrderByRelationAggregateInput
  }

  export type KotaWhereUniqueInput = {
    nm_kota?: string
  }

  export type KotaOrderByWithAggregationInput = {
    nm_kota?: SortOrder
    about?: SortOrder
    country?: SortOrder
    _count?: KotaCountOrderByAggregateInput
    _max?: KotaMaxOrderByAggregateInput
    _min?: KotaMinOrderByAggregateInput
  }

  export type KotaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KotaScalarWhereWithAggregatesInput>
    OR?: Enumerable<KotaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KotaScalarWhereWithAggregatesInput>
    nm_kota?: StringWithAggregatesFilter | string
    about?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
  }

  export type DestinationWhereInput = {
    AND?: Enumerable<DestinationWhereInput>
    OR?: Enumerable<DestinationWhereInput>
    NOT?: Enumerable<DestinationWhereInput>
    id?: IntFilter | number
    nm_destination?: StringFilter | string
    about?: StringFilter | string
    nm_kota?: StringFilter | string
    kota?: XOR<KotaRelationFilter, KotaWhereInput>
    hotel?: HotelListRelationFilter
  }

  export type DestinationOrderByWithRelationInput = {
    id?: SortOrder
    nm_destination?: SortOrder
    about?: SortOrder
    nm_kota?: SortOrder
    kota?: KotaOrderByWithRelationInput
    hotel?: HotelOrderByRelationAggregateInput
  }

  export type DestinationWhereUniqueInput = {
    id?: number
  }

  export type DestinationOrderByWithAggregationInput = {
    id?: SortOrder
    nm_destination?: SortOrder
    about?: SortOrder
    nm_kota?: SortOrder
    _count?: DestinationCountOrderByAggregateInput
    _avg?: DestinationAvgOrderByAggregateInput
    _max?: DestinationMaxOrderByAggregateInput
    _min?: DestinationMinOrderByAggregateInput
    _sum?: DestinationSumOrderByAggregateInput
  }

  export type DestinationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DestinationScalarWhereWithAggregatesInput>
    OR?: Enumerable<DestinationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DestinationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nm_destination?: StringWithAggregatesFilter | string
    about?: StringWithAggregatesFilter | string
    nm_kota?: StringWithAggregatesFilter | string
  }

  export type HotelWhereInput = {
    AND?: Enumerable<HotelWhereInput>
    OR?: Enumerable<HotelWhereInput>
    NOT?: Enumerable<HotelWhereInput>
    id?: IntFilter | number
    nm_hotel?: StringFilter | string
    about?: StringFilter | string
    alamat?: StringFilter | string
    price?: StringFilter | string
    id_destination?: IntFilter | number
    booking?: BookingListRelationFilter
    destination?: XOR<DestinationRelationFilter, DestinationWhereInput>
  }

  export type HotelOrderByWithRelationInput = {
    id?: SortOrder
    nm_hotel?: SortOrder
    about?: SortOrder
    alamat?: SortOrder
    price?: SortOrder
    id_destination?: SortOrder
    booking?: BookingOrderByRelationAggregateInput
    destination?: DestinationOrderByWithRelationInput
  }

  export type HotelWhereUniqueInput = {
    id?: number
  }

  export type HotelOrderByWithAggregationInput = {
    id?: SortOrder
    nm_hotel?: SortOrder
    about?: SortOrder
    alamat?: SortOrder
    price?: SortOrder
    id_destination?: SortOrder
    _count?: HotelCountOrderByAggregateInput
    _avg?: HotelAvgOrderByAggregateInput
    _max?: HotelMaxOrderByAggregateInput
    _min?: HotelMinOrderByAggregateInput
    _sum?: HotelSumOrderByAggregateInput
  }

  export type HotelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HotelScalarWhereWithAggregatesInput>
    OR?: Enumerable<HotelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HotelScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nm_hotel?: StringWithAggregatesFilter | string
    about?: StringWithAggregatesFilter | string
    alamat?: StringWithAggregatesFilter | string
    price?: StringWithAggregatesFilter | string
    id_destination?: IntWithAggregatesFilter | number
  }

  export type BookingWhereInput = {
    AND?: Enumerable<BookingWhereInput>
    OR?: Enumerable<BookingWhereInput>
    NOT?: Enumerable<BookingWhereInput>
    id_booking?: IntFilter | number
    check_in?: DateTimeFilter | Date | string
    check_out?: DateTimeFilter | Date | string
    price?: StringFilter | string
    username?: StringFilter | string
    id_hotel?: IntFilter | number
    hotel?: XOR<HotelRelationFilter, HotelWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BookingOrderByWithRelationInput = {
    id_booking?: SortOrder
    check_in?: SortOrder
    check_out?: SortOrder
    price?: SortOrder
    username?: SortOrder
    id_hotel?: SortOrder
    hotel?: HotelOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type BookingWhereUniqueInput = {
    id_booking?: number
  }

  export type BookingOrderByWithAggregationInput = {
    id_booking?: SortOrder
    check_in?: SortOrder
    check_out?: SortOrder
    price?: SortOrder
    username?: SortOrder
    id_hotel?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookingScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookingScalarWhereWithAggregatesInput>
    id_booking?: IntWithAggregatesFilter | number
    check_in?: DateTimeWithAggregatesFilter | Date | string
    check_out?: DateTimeWithAggregatesFilter | Date | string
    price?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    id_hotel?: IntWithAggregatesFilter | number
  }

  export type AdminCreateInput = {
    username: string
    password: string
  }

  export type AdminUncheckedCreateInput = {
    username: string
    password: string
  }

  export type AdminUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    username: string
    password: string
  }

  export type AdminUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    username: string
    full_name: string
    password: string
    email: string
    phone: string
    jkel?: string | null
    tgl_lahir?: string | null
    alamat?: string | null
    ktp?: string | null
    kode_pos?: string | null
    token?: string | null
    booking?: BookingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    username: string
    full_name: string
    password: string
    email: string
    phone: string
    jkel?: string | null
    tgl_lahir?: string | null
    alamat?: string | null
    ktp?: string | null
    kode_pos?: string | null
    token?: string | null
    booking?: BookingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    jkel?: NullableStringFieldUpdateOperationsInput | string | null
    tgl_lahir?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    kode_pos?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    booking?: BookingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    jkel?: NullableStringFieldUpdateOperationsInput | string | null
    tgl_lahir?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    kode_pos?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    username: string
    full_name: string
    password: string
    email: string
    phone: string
    jkel?: string | null
    tgl_lahir?: string | null
    alamat?: string | null
    ktp?: string | null
    kode_pos?: string | null
    token?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    jkel?: NullableStringFieldUpdateOperationsInput | string | null
    tgl_lahir?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    kode_pos?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    jkel?: NullableStringFieldUpdateOperationsInput | string | null
    tgl_lahir?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    kode_pos?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KotaCreateInput = {
    nm_kota: string
    about: string
    country: string
    destination?: DestinationCreateNestedManyWithoutKotaInput
  }

  export type KotaUncheckedCreateInput = {
    nm_kota: string
    about: string
    country: string
    destination?: DestinationUncheckedCreateNestedManyWithoutKotaInput
  }

  export type KotaUpdateInput = {
    nm_kota?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    destination?: DestinationUpdateManyWithoutKotaNestedInput
  }

  export type KotaUncheckedUpdateInput = {
    nm_kota?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    destination?: DestinationUncheckedUpdateManyWithoutKotaNestedInput
  }

  export type KotaCreateManyInput = {
    nm_kota: string
    about: string
    country: string
  }

  export type KotaUpdateManyMutationInput = {
    nm_kota?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type KotaUncheckedUpdateManyInput = {
    nm_kota?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type DestinationCreateInput = {
    nm_destination: string
    about: string
    kota: KotaCreateNestedOneWithoutDestinationInput
    hotel?: HotelCreateNestedManyWithoutDestinationInput
  }

  export type DestinationUncheckedCreateInput = {
    id?: number
    nm_destination: string
    about: string
    nm_kota: string
    hotel?: HotelUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type DestinationUpdateInput = {
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    kota?: KotaUpdateOneRequiredWithoutDestinationNestedInput
    hotel?: HotelUpdateManyWithoutDestinationNestedInput
  }

  export type DestinationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    nm_kota?: StringFieldUpdateOperationsInput | string
    hotel?: HotelUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type DestinationCreateManyInput = {
    id?: number
    nm_destination: string
    about: string
    nm_kota: string
  }

  export type DestinationUpdateManyMutationInput = {
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
  }

  export type DestinationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    nm_kota?: StringFieldUpdateOperationsInput | string
  }

  export type HotelCreateInput = {
    nm_hotel: string
    about: string
    alamat: string
    price: string
    booking?: BookingCreateNestedManyWithoutHotelInput
    destination: DestinationCreateNestedOneWithoutHotelInput
  }

  export type HotelUncheckedCreateInput = {
    id?: number
    nm_hotel: string
    about: string
    alamat: string
    price: string
    id_destination: number
    booking?: BookingUncheckedCreateNestedManyWithoutHotelInput
  }

  export type HotelUpdateInput = {
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutHotelNestedInput
    destination?: DestinationUpdateOneRequiredWithoutHotelNestedInput
  }

  export type HotelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    id_destination?: IntFieldUpdateOperationsInput | number
    booking?: BookingUncheckedUpdateManyWithoutHotelNestedInput
  }

  export type HotelCreateManyInput = {
    id?: number
    nm_hotel: string
    about: string
    alamat: string
    price: string
    id_destination: number
  }

  export type HotelUpdateManyMutationInput = {
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
  }

  export type HotelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    id_destination?: IntFieldUpdateOperationsInput | number
  }

  export type BookingCreateInput = {
    check_in: Date | string
    check_out: Date | string
    price: string
    hotel: HotelCreateNestedOneWithoutBookingInput
    user: UserCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    id_booking?: number
    check_in: Date | string
    check_out: Date | string
    price: string
    username: string
    id_hotel: number
  }

  export type BookingUpdateInput = {
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    hotel?: HotelUpdateOneRequiredWithoutBookingNestedInput
    user?: UserUpdateOneRequiredWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    id_booking?: IntFieldUpdateOperationsInput | number
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    id_hotel?: IntFieldUpdateOperationsInput | number
  }

  export type BookingCreateManyInput = {
    id_booking?: number
    check_in: Date | string
    check_out: Date | string
    price: string
    username: string
    id_hotel: number
  }

  export type BookingUpdateManyMutationInput = {
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUncheckedUpdateManyInput = {
    id_booking?: IntFieldUpdateOperationsInput | number
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    id_hotel?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type AdminCountOrderByAggregateInput = {
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    username?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    username?: SortOrder
    full_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    jkel?: SortOrder
    tgl_lahir?: SortOrder
    alamat?: SortOrder
    ktp?: SortOrder
    kode_pos?: SortOrder
    token?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    username?: SortOrder
    full_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    jkel?: SortOrder
    tgl_lahir?: SortOrder
    alamat?: SortOrder
    ktp?: SortOrder
    kode_pos?: SortOrder
    token?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    username?: SortOrder
    full_name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    jkel?: SortOrder
    tgl_lahir?: SortOrder
    alamat?: SortOrder
    ktp?: SortOrder
    kode_pos?: SortOrder
    token?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DestinationListRelationFilter = {
    every?: DestinationWhereInput
    some?: DestinationWhereInput
    none?: DestinationWhereInput
  }

  export type DestinationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KotaCountOrderByAggregateInput = {
    nm_kota?: SortOrder
    about?: SortOrder
    country?: SortOrder
  }

  export type KotaMaxOrderByAggregateInput = {
    nm_kota?: SortOrder
    about?: SortOrder
    country?: SortOrder
  }

  export type KotaMinOrderByAggregateInput = {
    nm_kota?: SortOrder
    about?: SortOrder
    country?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type KotaRelationFilter = {
    is?: KotaWhereInput
    isNot?: KotaWhereInput
  }

  export type HotelListRelationFilter = {
    every?: HotelWhereInput
    some?: HotelWhereInput
    none?: HotelWhereInput
  }

  export type HotelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DestinationCountOrderByAggregateInput = {
    id?: SortOrder
    nm_destination?: SortOrder
    about?: SortOrder
    nm_kota?: SortOrder
  }

  export type DestinationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DestinationMaxOrderByAggregateInput = {
    id?: SortOrder
    nm_destination?: SortOrder
    about?: SortOrder
    nm_kota?: SortOrder
  }

  export type DestinationMinOrderByAggregateInput = {
    id?: SortOrder
    nm_destination?: SortOrder
    about?: SortOrder
    nm_kota?: SortOrder
  }

  export type DestinationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DestinationRelationFilter = {
    is?: DestinationWhereInput
    isNot?: DestinationWhereInput
  }

  export type HotelCountOrderByAggregateInput = {
    id?: SortOrder
    nm_hotel?: SortOrder
    about?: SortOrder
    alamat?: SortOrder
    price?: SortOrder
    id_destination?: SortOrder
  }

  export type HotelAvgOrderByAggregateInput = {
    id?: SortOrder
    id_destination?: SortOrder
  }

  export type HotelMaxOrderByAggregateInput = {
    id?: SortOrder
    nm_hotel?: SortOrder
    about?: SortOrder
    alamat?: SortOrder
    price?: SortOrder
    id_destination?: SortOrder
  }

  export type HotelMinOrderByAggregateInput = {
    id?: SortOrder
    nm_hotel?: SortOrder
    about?: SortOrder
    alamat?: SortOrder
    price?: SortOrder
    id_destination?: SortOrder
  }

  export type HotelSumOrderByAggregateInput = {
    id?: SortOrder
    id_destination?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type HotelRelationFilter = {
    is?: HotelWhereInput
    isNot?: HotelWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BookingCountOrderByAggregateInput = {
    id_booking?: SortOrder
    check_in?: SortOrder
    check_out?: SortOrder
    price?: SortOrder
    username?: SortOrder
    id_hotel?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    id_booking?: SortOrder
    id_hotel?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id_booking?: SortOrder
    check_in?: SortOrder
    check_out?: SortOrder
    price?: SortOrder
    username?: SortOrder
    id_hotel?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id_booking?: SortOrder
    check_in?: SortOrder
    check_out?: SortOrder
    price?: SortOrder
    username?: SortOrder
    id_hotel?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    id_booking?: SortOrder
    id_hotel?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type DestinationCreateNestedManyWithoutKotaInput = {
    create?: XOR<Enumerable<DestinationCreateWithoutKotaInput>, Enumerable<DestinationUncheckedCreateWithoutKotaInput>>
    connectOrCreate?: Enumerable<DestinationCreateOrConnectWithoutKotaInput>
    createMany?: DestinationCreateManyKotaInputEnvelope
    connect?: Enumerable<DestinationWhereUniqueInput>
  }

  export type DestinationUncheckedCreateNestedManyWithoutKotaInput = {
    create?: XOR<Enumerable<DestinationCreateWithoutKotaInput>, Enumerable<DestinationUncheckedCreateWithoutKotaInput>>
    connectOrCreate?: Enumerable<DestinationCreateOrConnectWithoutKotaInput>
    createMany?: DestinationCreateManyKotaInputEnvelope
    connect?: Enumerable<DestinationWhereUniqueInput>
  }

  export type DestinationUpdateManyWithoutKotaNestedInput = {
    create?: XOR<Enumerable<DestinationCreateWithoutKotaInput>, Enumerable<DestinationUncheckedCreateWithoutKotaInput>>
    connectOrCreate?: Enumerable<DestinationCreateOrConnectWithoutKotaInput>
    upsert?: Enumerable<DestinationUpsertWithWhereUniqueWithoutKotaInput>
    createMany?: DestinationCreateManyKotaInputEnvelope
    set?: Enumerable<DestinationWhereUniqueInput>
    disconnect?: Enumerable<DestinationWhereUniqueInput>
    delete?: Enumerable<DestinationWhereUniqueInput>
    connect?: Enumerable<DestinationWhereUniqueInput>
    update?: Enumerable<DestinationUpdateWithWhereUniqueWithoutKotaInput>
    updateMany?: Enumerable<DestinationUpdateManyWithWhereWithoutKotaInput>
    deleteMany?: Enumerable<DestinationScalarWhereInput>
  }

  export type DestinationUncheckedUpdateManyWithoutKotaNestedInput = {
    create?: XOR<Enumerable<DestinationCreateWithoutKotaInput>, Enumerable<DestinationUncheckedCreateWithoutKotaInput>>
    connectOrCreate?: Enumerable<DestinationCreateOrConnectWithoutKotaInput>
    upsert?: Enumerable<DestinationUpsertWithWhereUniqueWithoutKotaInput>
    createMany?: DestinationCreateManyKotaInputEnvelope
    set?: Enumerable<DestinationWhereUniqueInput>
    disconnect?: Enumerable<DestinationWhereUniqueInput>
    delete?: Enumerable<DestinationWhereUniqueInput>
    connect?: Enumerable<DestinationWhereUniqueInput>
    update?: Enumerable<DestinationUpdateWithWhereUniqueWithoutKotaInput>
    updateMany?: Enumerable<DestinationUpdateManyWithWhereWithoutKotaInput>
    deleteMany?: Enumerable<DestinationScalarWhereInput>
  }

  export type KotaCreateNestedOneWithoutDestinationInput = {
    create?: XOR<KotaCreateWithoutDestinationInput, KotaUncheckedCreateWithoutDestinationInput>
    connectOrCreate?: KotaCreateOrConnectWithoutDestinationInput
    connect?: KotaWhereUniqueInput
  }

  export type HotelCreateNestedManyWithoutDestinationInput = {
    create?: XOR<Enumerable<HotelCreateWithoutDestinationInput>, Enumerable<HotelUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<HotelCreateOrConnectWithoutDestinationInput>
    createMany?: HotelCreateManyDestinationInputEnvelope
    connect?: Enumerable<HotelWhereUniqueInput>
  }

  export type HotelUncheckedCreateNestedManyWithoutDestinationInput = {
    create?: XOR<Enumerable<HotelCreateWithoutDestinationInput>, Enumerable<HotelUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<HotelCreateOrConnectWithoutDestinationInput>
    createMany?: HotelCreateManyDestinationInputEnvelope
    connect?: Enumerable<HotelWhereUniqueInput>
  }

  export type KotaUpdateOneRequiredWithoutDestinationNestedInput = {
    create?: XOR<KotaCreateWithoutDestinationInput, KotaUncheckedCreateWithoutDestinationInput>
    connectOrCreate?: KotaCreateOrConnectWithoutDestinationInput
    upsert?: KotaUpsertWithoutDestinationInput
    connect?: KotaWhereUniqueInput
    update?: XOR<KotaUpdateWithoutDestinationInput, KotaUncheckedUpdateWithoutDestinationInput>
  }

  export type HotelUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<Enumerable<HotelCreateWithoutDestinationInput>, Enumerable<HotelUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<HotelCreateOrConnectWithoutDestinationInput>
    upsert?: Enumerable<HotelUpsertWithWhereUniqueWithoutDestinationInput>
    createMany?: HotelCreateManyDestinationInputEnvelope
    set?: Enumerable<HotelWhereUniqueInput>
    disconnect?: Enumerable<HotelWhereUniqueInput>
    delete?: Enumerable<HotelWhereUniqueInput>
    connect?: Enumerable<HotelWhereUniqueInput>
    update?: Enumerable<HotelUpdateWithWhereUniqueWithoutDestinationInput>
    updateMany?: Enumerable<HotelUpdateManyWithWhereWithoutDestinationInput>
    deleteMany?: Enumerable<HotelScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HotelUncheckedUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<Enumerable<HotelCreateWithoutDestinationInput>, Enumerable<HotelUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<HotelCreateOrConnectWithoutDestinationInput>
    upsert?: Enumerable<HotelUpsertWithWhereUniqueWithoutDestinationInput>
    createMany?: HotelCreateManyDestinationInputEnvelope
    set?: Enumerable<HotelWhereUniqueInput>
    disconnect?: Enumerable<HotelWhereUniqueInput>
    delete?: Enumerable<HotelWhereUniqueInput>
    connect?: Enumerable<HotelWhereUniqueInput>
    update?: Enumerable<HotelUpdateWithWhereUniqueWithoutDestinationInput>
    updateMany?: Enumerable<HotelUpdateManyWithWhereWithoutDestinationInput>
    deleteMany?: Enumerable<HotelScalarWhereInput>
  }

  export type BookingCreateNestedManyWithoutHotelInput = {
    create?: XOR<Enumerable<BookingCreateWithoutHotelInput>, Enumerable<BookingUncheckedCreateWithoutHotelInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutHotelInput>
    createMany?: BookingCreateManyHotelInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type DestinationCreateNestedOneWithoutHotelInput = {
    create?: XOR<DestinationCreateWithoutHotelInput, DestinationUncheckedCreateWithoutHotelInput>
    connectOrCreate?: DestinationCreateOrConnectWithoutHotelInput
    connect?: DestinationWhereUniqueInput
  }

  export type BookingUncheckedCreateNestedManyWithoutHotelInput = {
    create?: XOR<Enumerable<BookingCreateWithoutHotelInput>, Enumerable<BookingUncheckedCreateWithoutHotelInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutHotelInput>
    createMany?: BookingCreateManyHotelInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type BookingUpdateManyWithoutHotelNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutHotelInput>, Enumerable<BookingUncheckedCreateWithoutHotelInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutHotelInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutHotelInput>
    createMany?: BookingCreateManyHotelInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutHotelInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutHotelInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type DestinationUpdateOneRequiredWithoutHotelNestedInput = {
    create?: XOR<DestinationCreateWithoutHotelInput, DestinationUncheckedCreateWithoutHotelInput>
    connectOrCreate?: DestinationCreateOrConnectWithoutHotelInput
    upsert?: DestinationUpsertWithoutHotelInput
    connect?: DestinationWhereUniqueInput
    update?: XOR<DestinationUpdateWithoutHotelInput, DestinationUncheckedUpdateWithoutHotelInput>
  }

  export type BookingUncheckedUpdateManyWithoutHotelNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutHotelInput>, Enumerable<BookingUncheckedCreateWithoutHotelInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutHotelInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutHotelInput>
    createMany?: BookingCreateManyHotelInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutHotelInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutHotelInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type HotelCreateNestedOneWithoutBookingInput = {
    create?: XOR<HotelCreateWithoutBookingInput, HotelUncheckedCreateWithoutBookingInput>
    connectOrCreate?: HotelCreateOrConnectWithoutBookingInput
    connect?: HotelWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBookingInput = {
    create?: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HotelUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<HotelCreateWithoutBookingInput, HotelUncheckedCreateWithoutBookingInput>
    connectOrCreate?: HotelCreateOrConnectWithoutBookingInput
    upsert?: HotelUpsertWithoutBookingInput
    connect?: HotelWhereUniqueInput
    update?: XOR<HotelUpdateWithoutBookingInput, HotelUncheckedUpdateWithoutBookingInput>
  }

  export type UserUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingInput
    upsert?: UserUpsertWithoutBookingInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBookingInput, UserUncheckedUpdateWithoutBookingInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BookingCreateWithoutUserInput = {
    check_in: Date | string
    check_out: Date | string
    price: string
    hotel: HotelCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    id_booking?: number
    check_in: Date | string
    check_out: Date | string
    price: string
    id_hotel: number
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: Enumerable<BookingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type BookingScalarWhereInput = {
    AND?: Enumerable<BookingScalarWhereInput>
    OR?: Enumerable<BookingScalarWhereInput>
    NOT?: Enumerable<BookingScalarWhereInput>
    id_booking?: IntFilter | number
    check_in?: DateTimeFilter | Date | string
    check_out?: DateTimeFilter | Date | string
    price?: StringFilter | string
    username?: StringFilter | string
    id_hotel?: IntFilter | number
  }

  export type DestinationCreateWithoutKotaInput = {
    nm_destination: string
    about: string
    hotel?: HotelCreateNestedManyWithoutDestinationInput
  }

  export type DestinationUncheckedCreateWithoutKotaInput = {
    id?: number
    nm_destination: string
    about: string
    hotel?: HotelUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type DestinationCreateOrConnectWithoutKotaInput = {
    where: DestinationWhereUniqueInput
    create: XOR<DestinationCreateWithoutKotaInput, DestinationUncheckedCreateWithoutKotaInput>
  }

  export type DestinationCreateManyKotaInputEnvelope = {
    data: Enumerable<DestinationCreateManyKotaInput>
    skipDuplicates?: boolean
  }

  export type DestinationUpsertWithWhereUniqueWithoutKotaInput = {
    where: DestinationWhereUniqueInput
    update: XOR<DestinationUpdateWithoutKotaInput, DestinationUncheckedUpdateWithoutKotaInput>
    create: XOR<DestinationCreateWithoutKotaInput, DestinationUncheckedCreateWithoutKotaInput>
  }

  export type DestinationUpdateWithWhereUniqueWithoutKotaInput = {
    where: DestinationWhereUniqueInput
    data: XOR<DestinationUpdateWithoutKotaInput, DestinationUncheckedUpdateWithoutKotaInput>
  }

  export type DestinationUpdateManyWithWhereWithoutKotaInput = {
    where: DestinationScalarWhereInput
    data: XOR<DestinationUpdateManyMutationInput, DestinationUncheckedUpdateManyWithoutDestinationInput>
  }

  export type DestinationScalarWhereInput = {
    AND?: Enumerable<DestinationScalarWhereInput>
    OR?: Enumerable<DestinationScalarWhereInput>
    NOT?: Enumerable<DestinationScalarWhereInput>
    id?: IntFilter | number
    nm_destination?: StringFilter | string
    about?: StringFilter | string
    nm_kota?: StringFilter | string
  }

  export type KotaCreateWithoutDestinationInput = {
    nm_kota: string
    about: string
    country: string
  }

  export type KotaUncheckedCreateWithoutDestinationInput = {
    nm_kota: string
    about: string
    country: string
  }

  export type KotaCreateOrConnectWithoutDestinationInput = {
    where: KotaWhereUniqueInput
    create: XOR<KotaCreateWithoutDestinationInput, KotaUncheckedCreateWithoutDestinationInput>
  }

  export type HotelCreateWithoutDestinationInput = {
    nm_hotel: string
    about: string
    alamat: string
    price: string
    booking?: BookingCreateNestedManyWithoutHotelInput
  }

  export type HotelUncheckedCreateWithoutDestinationInput = {
    id?: number
    nm_hotel: string
    about: string
    alamat: string
    price: string
    booking?: BookingUncheckedCreateNestedManyWithoutHotelInput
  }

  export type HotelCreateOrConnectWithoutDestinationInput = {
    where: HotelWhereUniqueInput
    create: XOR<HotelCreateWithoutDestinationInput, HotelUncheckedCreateWithoutDestinationInput>
  }

  export type HotelCreateManyDestinationInputEnvelope = {
    data: Enumerable<HotelCreateManyDestinationInput>
    skipDuplicates?: boolean
  }

  export type KotaUpsertWithoutDestinationInput = {
    update: XOR<KotaUpdateWithoutDestinationInput, KotaUncheckedUpdateWithoutDestinationInput>
    create: XOR<KotaCreateWithoutDestinationInput, KotaUncheckedCreateWithoutDestinationInput>
  }

  export type KotaUpdateWithoutDestinationInput = {
    nm_kota?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type KotaUncheckedUpdateWithoutDestinationInput = {
    nm_kota?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type HotelUpsertWithWhereUniqueWithoutDestinationInput = {
    where: HotelWhereUniqueInput
    update: XOR<HotelUpdateWithoutDestinationInput, HotelUncheckedUpdateWithoutDestinationInput>
    create: XOR<HotelCreateWithoutDestinationInput, HotelUncheckedCreateWithoutDestinationInput>
  }

  export type HotelUpdateWithWhereUniqueWithoutDestinationInput = {
    where: HotelWhereUniqueInput
    data: XOR<HotelUpdateWithoutDestinationInput, HotelUncheckedUpdateWithoutDestinationInput>
  }

  export type HotelUpdateManyWithWhereWithoutDestinationInput = {
    where: HotelScalarWhereInput
    data: XOR<HotelUpdateManyMutationInput, HotelUncheckedUpdateManyWithoutHotelInput>
  }

  export type HotelScalarWhereInput = {
    AND?: Enumerable<HotelScalarWhereInput>
    OR?: Enumerable<HotelScalarWhereInput>
    NOT?: Enumerable<HotelScalarWhereInput>
    id?: IntFilter | number
    nm_hotel?: StringFilter | string
    about?: StringFilter | string
    alamat?: StringFilter | string
    price?: StringFilter | string
    id_destination?: IntFilter | number
  }

  export type BookingCreateWithoutHotelInput = {
    check_in: Date | string
    check_out: Date | string
    price: string
    user: UserCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutHotelInput = {
    id_booking?: number
    check_in: Date | string
    check_out: Date | string
    price: string
    username: string
  }

  export type BookingCreateOrConnectWithoutHotelInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutHotelInput, BookingUncheckedCreateWithoutHotelInput>
  }

  export type BookingCreateManyHotelInputEnvelope = {
    data: Enumerable<BookingCreateManyHotelInput>
    skipDuplicates?: boolean
  }

  export type DestinationCreateWithoutHotelInput = {
    nm_destination: string
    about: string
    kota: KotaCreateNestedOneWithoutDestinationInput
  }

  export type DestinationUncheckedCreateWithoutHotelInput = {
    id?: number
    nm_destination: string
    about: string
    nm_kota: string
  }

  export type DestinationCreateOrConnectWithoutHotelInput = {
    where: DestinationWhereUniqueInput
    create: XOR<DestinationCreateWithoutHotelInput, DestinationUncheckedCreateWithoutHotelInput>
  }

  export type BookingUpsertWithWhereUniqueWithoutHotelInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutHotelInput, BookingUncheckedUpdateWithoutHotelInput>
    create: XOR<BookingCreateWithoutHotelInput, BookingUncheckedCreateWithoutHotelInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutHotelInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutHotelInput, BookingUncheckedUpdateWithoutHotelInput>
  }

  export type BookingUpdateManyWithWhereWithoutHotelInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type DestinationUpsertWithoutHotelInput = {
    update: XOR<DestinationUpdateWithoutHotelInput, DestinationUncheckedUpdateWithoutHotelInput>
    create: XOR<DestinationCreateWithoutHotelInput, DestinationUncheckedCreateWithoutHotelInput>
  }

  export type DestinationUpdateWithoutHotelInput = {
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    kota?: KotaUpdateOneRequiredWithoutDestinationNestedInput
  }

  export type DestinationUncheckedUpdateWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    nm_kota?: StringFieldUpdateOperationsInput | string
  }

  export type HotelCreateWithoutBookingInput = {
    nm_hotel: string
    about: string
    alamat: string
    price: string
    destination: DestinationCreateNestedOneWithoutHotelInput
  }

  export type HotelUncheckedCreateWithoutBookingInput = {
    id?: number
    nm_hotel: string
    about: string
    alamat: string
    price: string
    id_destination: number
  }

  export type HotelCreateOrConnectWithoutBookingInput = {
    where: HotelWhereUniqueInput
    create: XOR<HotelCreateWithoutBookingInput, HotelUncheckedCreateWithoutBookingInput>
  }

  export type UserCreateWithoutBookingInput = {
    username: string
    full_name: string
    password: string
    email: string
    phone: string
    jkel?: string | null
    tgl_lahir?: string | null
    alamat?: string | null
    ktp?: string | null
    kode_pos?: string | null
    token?: string | null
  }

  export type UserUncheckedCreateWithoutBookingInput = {
    username: string
    full_name: string
    password: string
    email: string
    phone: string
    jkel?: string | null
    tgl_lahir?: string | null
    alamat?: string | null
    ktp?: string | null
    kode_pos?: string | null
    token?: string | null
  }

  export type UserCreateOrConnectWithoutBookingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
  }

  export type HotelUpsertWithoutBookingInput = {
    update: XOR<HotelUpdateWithoutBookingInput, HotelUncheckedUpdateWithoutBookingInput>
    create: XOR<HotelCreateWithoutBookingInput, HotelUncheckedCreateWithoutBookingInput>
  }

  export type HotelUpdateWithoutBookingInput = {
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    destination?: DestinationUpdateOneRequiredWithoutHotelNestedInput
  }

  export type HotelUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    id_destination?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutBookingInput = {
    update: XOR<UserUpdateWithoutBookingInput, UserUncheckedUpdateWithoutBookingInput>
    create: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
  }

  export type UserUpdateWithoutBookingInput = {
    username?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    jkel?: NullableStringFieldUpdateOperationsInput | string | null
    tgl_lahir?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    kode_pos?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutBookingInput = {
    username?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    jkel?: NullableStringFieldUpdateOperationsInput | string | null
    tgl_lahir?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    ktp?: NullableStringFieldUpdateOperationsInput | string | null
    kode_pos?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingCreateManyUserInput = {
    id_booking?: number
    check_in: Date | string
    check_out: Date | string
    price: string
    id_hotel: number
  }

  export type BookingUpdateWithoutUserInput = {
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    hotel?: HotelUpdateOneRequiredWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    id_booking?: IntFieldUpdateOperationsInput | number
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    id_hotel?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUncheckedUpdateManyWithoutBookingInput = {
    id_booking?: IntFieldUpdateOperationsInput | number
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    id_hotel?: IntFieldUpdateOperationsInput | number
  }

  export type DestinationCreateManyKotaInput = {
    id?: number
    nm_destination: string
    about: string
  }

  export type DestinationUpdateWithoutKotaInput = {
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    hotel?: HotelUpdateManyWithoutDestinationNestedInput
  }

  export type DestinationUncheckedUpdateWithoutKotaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    hotel?: HotelUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type DestinationUncheckedUpdateManyWithoutDestinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_destination?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
  }

  export type HotelCreateManyDestinationInput = {
    id?: number
    nm_hotel: string
    about: string
    alamat: string
    price: string
  }

  export type HotelUpdateWithoutDestinationInput = {
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutHotelNestedInput
  }

  export type HotelUncheckedUpdateWithoutDestinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    booking?: BookingUncheckedUpdateManyWithoutHotelNestedInput
  }

  export type HotelUncheckedUpdateManyWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    nm_hotel?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
  }

  export type BookingCreateManyHotelInput = {
    id_booking?: number
    check_in: Date | string
    check_out: Date | string
    price: string
    username: string
  }

  export type BookingUpdateWithoutHotelInput = {
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutHotelInput = {
    id_booking?: IntFieldUpdateOperationsInput | number
    check_in?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}